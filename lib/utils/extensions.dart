import 'dart:collection';

import 'package:flutter/material.dart';
import 'package:modern_art_app/lang/localization.dart';

extension AppLocalizationsExtensions on BuildContext {
  AppLocalizationsData get localizations =>
      Localizations.of<AppLocalizationsData>(
        this,
        AppLocalizationsData,
      )!;
}

extension Localization on BuildContext {
  /// Extension method on [BuildContext] that provides access to the localized
  /// list of strings generated by the flutter_sheet_localization library.
  AppLocalizationsData strings() => Localizations.of<AppLocalizationsData>(
        this,
        AppLocalizationsData,
      )!;

  /// Extension method on [BuildContext] that provides access to the current
  /// locale of the device.
  Locale locale() => Localizations.localeOf(this);
}

extension CustomStringMethods on String {
  /// Extension method on [String] that properly capitalizes Greek strings,
  /// removing any unnecessary accents in the capitalized string. The method
  /// otherwise works identically to ["string".toUpperCase()] in other
  /// languages. For example:
  ///
  /// `"Εργα τέχνης"` becomes `"ΕΡΓΑ ΤΕΧΝΗΣ"` and not `"ΈΡΓΑ ΤΈΧΝΗΣ"`
  ///
  /// (NOTE: the accented capital vowels in the example above may not show up
  /// properly here in the IDE, but they usually do in other text editors).
  ///
  /// One case that this method does not deal with is vowels with διαλυτικά,
  /// e.g. ΐ, ΰ, etc.
  ///
  /// The [ReCase](https://pub.dev/packages/recase) package may be used to
  /// achieve this functionality (one disadvantage is that it replaces spaces
  /// with "_").
  String customToUpperCase() {
    final RegExp greek = RegExp('[α-ωΑ-Ω]');
    if (contains(greek)) {
      final Map<String, String> greekAccentMap = Map.fromIterables(
        ['ά', 'έ', 'ή', 'ί', 'ό', 'ύ', 'ώ'],
        ['α', 'ε', 'η', 'ι', 'ο', 'υ', 'ω'],
      );

      return greekAccentMap.entries
          .fold(
            toLowerCase(),
            (String prev, MapEntry<String, String> vowelToReplace) =>
                prev.replaceAll(vowelToReplace.key, vowelToReplace.value),
          )
          .toUpperCase();
    }
    return toUpperCase();
  }
}

extension MapExt<T, U> on Map<T, U> {
  Map<T, U> sortedByValue(
    Comparable Function(U u) value, {
    Order order = Order.asc,
  }) {
    final entries = this.entries.toList();

    if (order == Order.asc) {
      entries.sort((a, b) => value(a.value).compareTo(value(b.value)));
    } else {
      entries.sort((a, b) => value(b.value).compareTo(value(a.value)));
    }
    return LinkedHashMap<T, U>.fromEntries(entries);
  }
}

enum Order { asc, desc }
